{"version":3,"file":"roomContentsToPrompt.js","sourceRoot":"","sources":["../../src/daimon/roomContentsToPrompt.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAG/C,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,oBAAoB,EAAE,MAAM,gCAAgC,CAAC;AAEtE,MAAM,CAAC,MAAM,oBAAoB,GAC/B,CAA8B,GAAiC,EAAE,EAAE,CACnE,KAAK,EACH,YAA2B,EAC3B,EAAE,SAAS,GAAG,CAAC,KAAqC,EAAE,EACtD,EAAE;IACF,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC;IAE9C,MAAM,aAAa,GAAG,YAAY;SAC/B,MAAM,CACL,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CACd,SAAS,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,WAAW,KAAK,oBAAoB,CACrE;SACA,QAAQ,CAAC,eAAe,CAAC;SACzB,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;QACnB,MAAM,EAAE,KAAK,EAAE,GAAG,OAAQ,CAAC;QAC3B,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,CAAC,CAAC;IAEd,MAAM,cAAc,GAAG,YAAY;SAChC,MAAM,CACL,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CACd,SAAS,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,WAAW,KAAK,oBAAoB,CACrE;SACA,QAAQ,CAAC,eAAe,CAAC;SACzB,KAAK,CAAC,CAAC,SAAS,CAAC;SACjB,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;QACnB,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,OAAQ,CAAC;QACtC,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC;QACpE,MAAM,WAAW,GAAG,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC;QACtD,OAAO,GAAG,WAAW,KAAK,KAAK,EAAE,CAAC;IACpC,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,CAAC,CAAC;IACd,OAAO,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACtD,CAAC,CAAC","sourcesContent":["import type { MessageConnectionInstance } from \"@mjt-engine/message/dist/createConnection\";\nimport { isDefined } from \"@mjt-engine/object\";\nimport type { DataConnectionMap } from \"@mjt-services/data-common-2025\";\nimport type { RoomContent } from \"../type/RoomContent\";\nimport { getAllDaimons } from \"./getAllDaimons\";\nimport { MESSAGE_CONTENT_TYPE } from \"./MESSAGE_CONTENT_TYPE\";\nimport { sortByCreatedAt } from \"./sortByCreatedAt\";\nimport { SUMMARY_CONTENT_TYPE } from \"./summary/SUMMARY_CONTENT_TYPE\";\n\nexport const roomContentsToPrompt =\n  <M extends DataConnectionMap>(con: MessageConnectionInstance<M>) =>\n  async (\n    roomContents: RoomContent[],\n    { chunkSize = 7 }: Partial<{ chunkSize: number }> = {}\n  ) => {\n    const allDaimons = await getAllDaimons(con)();\n\n    const summaryPrompt = roomContents\n      .filter(\n        ({ content }) =>\n          isDefined(content) && content.contentType === SUMMARY_CONTENT_TYPE\n      )\n      .toSorted(sortByCreatedAt)\n      .map(({ content }) => {\n        const { value } = content!;\n        return value;\n      })\n      .join(\"\\n\");\n\n    const messagesPrompt = roomContents\n      .filter(\n        ({ content }) =>\n          isDefined(content) && content.contentType === MESSAGE_CONTENT_TYPE\n      )\n      .toSorted(sortByCreatedAt)\n      .slice(-chunkSize)\n      .map(({ content }) => {\n        const { value, creatorId } = content!;\n        const daimon = allDaimons.find((daimon) => daimon.id === creatorId);\n        const speakerName = daimon?.chara.data.name ?? \"user\";\n        return `${speakerName}: ${value}`;\n      })\n      .join(\"\\n\");\n    return [summaryPrompt, messagesPrompt].join(\"\\n\\n\");\n  };\n"]}