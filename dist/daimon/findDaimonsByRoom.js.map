{"version":3,"file":"findDaimonsByRoom.js","sourceRoot":"","sources":["../../src/daimon/findDaimonsByRoom.ts"],"names":[],"mappings":"AACA,OAAO,EACL,KAAK,EACL,iBAAiB,GAElB,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAE,mBAAmB,EAAe,MAAM,gBAAgB,CAAC;AAClE,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAG5D,MAAM,CAAC,MAAM,iBAAiB,GAC5B,CAA8B,GAAiC,EAAE,EAAE,CACnE,KAAK,EAAE,YAA2B,EAAqB,EAAE;IACvD,MAAM,MAAM,GACV,OAAO,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC;IACpE,MAAM,IAAI,GACR,OAAO,YAAY,KAAK,QAAQ;QAC9B,CAAC,CAAE,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrB,GAAG,EAAE,MAAM;SACZ,CAAC,CAAU;QACd,CAAC,CAAC,YAAY,CAAC;IAEnB,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,mBAAmB,MAAM,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,MAAM,GAAG,GAAG,CAAC,MAAM,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,EAAE,iBAAiB;QACvB,KAAK,EAAE,yBAAyB,MAAM,kBAAkB;KACzD,CAAC,CAAa,CAAC;IAEhB,MAAM,KAAK,GAAG,yBAAyB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;IAEjE,MAAM,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,EAAE,mBAAmB;QACzB,KAAK;KACN,CAAC,CAAa,CAAC;IAEhB,qCAAqC;IACrC,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC7B,MAAM,aAAa,GAAG,MAAM,iBAAiB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClE,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,YAAY,CAAC,EAAE,CAAC,EAAE,CAAC;gBACnD,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;IACH,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import type { MessageConnectionInstance } from \"@mjt-engine/message/dist/createConnection\";\nimport {\n  Datas,\n  LINK_OBJECT_STORE,\n  type DataConnectionMap,\n} from \"@mjt-services/data-common-2025\";\nimport { DAIMON_OBJECT_STORE, type Daimon } from \"../type/Daimon\";\nimport { isDefined, isUndefined } from \"@mjt-engine/object\";\nimport type { Room } from \"../type/Room\";\n\nexport const findDaimonsByRoom =\n  <M extends DataConnectionMap>(con: MessageConnectionInstance<M>) =>\n  async (roomIdOrRoom: string | Room): Promise<Daimon[]> => {\n    const roomId =\n      typeof roomIdOrRoom === \"string\" ? roomIdOrRoom : roomIdOrRoom.id;\n    const room =\n      typeof roomIdOrRoom === \"string\"\n        ? ((await Datas.get(con)({\n            key: roomId,\n          })) as Room)\n        : roomIdOrRoom;\n\n    if (isUndefined(room)) {\n      throw new Error(`Room not found: ${roomId}`);\n    }\n\n    const ids = (await Datas.search(con)({\n      from: LINK_OBJECT_STORE,\n      query: `values(@)[?roomId == '${roomId}'].daimonId | []`,\n    })) as string[];\n\n    const query = `values(@)[?contains(['${ids.join(\"','\")}'], id)]`;\n\n    const daimons = (await Datas.search(con)({\n      from: DAIMON_OBJECT_STORE,\n      query,\n    })) as Daimon[];\n\n    // get all daimons in the parent room\n    if (isDefined(room.parentId)) {\n      const parentDaimons = await findDaimonsByRoom(con)(room.parentId);\n      for (const parentDaimon of parentDaimons) {\n        if (!daimons.some((d) => d.id === parentDaimon.id)) {\n          daimons.push(parentDaimon);\n        }\n      }\n    }\n    return daimons;\n  };\n"]}