{"version":3,"file":"addRoomSummary.js","sourceRoot":"","sources":["../../../src/daimon/summary/addRoomSummary.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MessageConnectionInstance } from \"@mjt-engine/message/dist/createConnection\";\nimport { isDefined } from \"@mjt-engine/object\";\nimport { Datas, type DataConnectionMap } from \"@mjt-services/data-common-2025\";\nimport {\n  Textgens,\n  type TextgenConnectionMap,\n} from \"@mjt-services/textgen-common-2025\";\nimport { CONTENT_OBJECT_STORE } from \"../../type/Content\";\nimport { ROOM_OBJECT_STORE } from \"../../type/Room\";\nimport { askDaimon } from \"../askDaimon\";\nimport { findRoomContents } from \"../findRoomContents\";\nimport { MESSAGE_CONTENT_TYPE } from \"../MESSAGE_CONTENT_TYPE\";\nimport { SUMMARY_CONTENT_TYPE } from \"./SUMMARY_CONTENT_TYPE\";\nimport { updateRootRoomSummary } from \"./updateRootRoomSummary\";\n\nexport const addRoomSummary =\n  <M extends DataConnectionMap & TextgenConnectionMap>(\n    con: MessageConnectionInstance<M>\n  ) =>\n  async ({\n    roomId,\n    query,\n    model,\n    chunkSize = 7,\n    overlapSize = 2,\n  }: {\n    roomId: string;\n    query: string;\n    model?: string;\n    chunkSize?: number;\n    overlapSize?: number;\n  }) => {\n    const roomContents = await findRoomContents(con)(roomId);\n    // const { chunkSize, overlapSize } = getSummaryChunkSize();\n    const shortSummaryQuery =\n      \"Summarize the conversation in 3 to 5 words, no quotes, no punctuation. This is for the name of conversation so that the user can easily find it later.\";\n    if (roomContents.length === 2) {\n      const shortSummary = await askDaimon(con)({\n        query: shortSummaryQuery,\n        roomId,\n        assistant: {\n          chara: {\n            data: {\n              name: \"Summarizer\",\n              description: \"An expert summarization service\",\n            },\n            spec: \"chara_card_v2\",\n            spec_version: \"\",\n          },\n        },\n      });\n      if (isDefined(shortSummary)) {\n        await updateRootRoomSummary(con)({\n          roomId,\n          summary: shortSummary.value,\n        });\n      }\n    }\n\n    const idxOfLastSummary = roomContents.findLastIndex(\n      (c) => c.content?.contentType === SUMMARY_CONTENT_TYPE\n    );\n    if (idxOfLastSummary >= roomContents.length - chunkSize) {\n      return;\n    }\n    const sumarizableContents = roomContents.filter(\n      (c) => c.content?.contentType == MESSAGE_CONTENT_TYPE\n    );\n\n    const chunkContents = sumarizableContents.slice(\n      Math.max(0, sumarizableContents.length - chunkSize - overlapSize),\n      sumarizableContents.length\n    );\n\n    const summary = await Textgens.ask(con)({\n      model,\n      systemMessage: chunkContents.map((c) => c.content?.value).join(\"\\n\"),\n      userMessage: query,\n    });\n    const contentId = await Datas.putEntity(con)(CONTENT_OBJECT_STORE)({\n      value: summary,\n      contentType: SUMMARY_CONTENT_TYPE,\n      finalized: true,\n    });\n\n    await Datas.putEntity(con)(ROOM_OBJECT_STORE)({\n      contentId,\n      parentId: roomId,\n    });\n\n    const shortSummary = await Textgens.ask(con)({\n      userMessage: shortSummaryQuery,\n      systemMessage: summary,\n    });\n    if (isDefined(shortSummary)) {\n      await updateRootRoomSummary(con)({\n        roomId,\n        summary: shortSummary,\n      });\n    }\n  };\n"]}