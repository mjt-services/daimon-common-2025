{"version":3,"file":"askDaimon.js","sourceRoot":"","sources":["../../src/daimon/askDaimon.ts"],"names":[],"mappings":"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","sourcesContent":["import { isDefined } from \"@mjt-engine/object\";\nimport {\n  Datas,\n  isEntity,\n  type DataConnectionMap,\n} from \"@mjt-services/data-common-2025\";\nimport { roomContentsToPrompt } from \"./roomContentsToPrompt\";\nimport { roomsToRoomContents } from \"./roomsToRoomContents\";\nimport { findRoomChildren } from \"./findRoomChildren\";\nimport { findPriorTimelineSiblings } from \"./findPriorTimelineSiblings\";\nimport { findRoomContext } from \"./findRoomContext\";\nimport type { MessageConnectionInstance } from \"@mjt-engine/message/dist/createConnection\";\nimport type { TextgenConnectionMap } from \"@mjt-services/textgen-common-2025\";\nimport type { DaimonConnectionMap } from \"../DiamonConnectionMap\";\nimport type { BaseDaimon, Daimon } from \"../type/Daimon\";\nimport type { Content } from \"../type/Content\";\nimport { Daimons } from \"./Daimons\";\nimport { MESSAGE_CONTENT_TYPE } from \"./MESSAGE_CONTENT_TYPE\";\n\nexport const askDaimon =\n  <M extends DataConnectionMap & TextgenConnectionMap>(\n    con: MessageConnectionInstance<M>\n  ) =>\n  async (\n    props: DaimonConnectionMap[\"daimon.ask\"][\"request\"][\"body\"] & {\n      signal?: AbortSignal;\n      assistant?: BaseDaimon;\n      onUpdate?: (content: Partial<Content>) => void | Promise<void>;\n      responseTextMapper?: (text: string) => string;\n    }\n  ) => {\n    const {\n      roomId,\n      query,\n      assistantId,\n      userId,\n      signal,\n      onUpdate,\n      responseTextMapper = (text) => text,\n      maxTokens = 2048,\n      assistant,\n    } = props;\n\n    // const con = await getConnection();\n\n    const daimons = isDefined(roomId)\n      ? (await Daimons.findDaimonsByRoom(con)(roomId)).toSorted((a, b) => {\n          if (a.chara.data.name && b.chara.data.name) {\n            return a.chara.data.name.localeCompare(b.chara.data.name);\n          }\n          return 0;\n        })\n      : [];\n    const userDaimon = isDefined(userId)\n      ? (await Datas.get(con)({ key: userId }))\n        ? daimons.find((d) => d.chara.data.extensions?.isUser)\n        : undefined\n      : undefined;\n\n    const assistantDaimon = isDefined(assistantId)\n      ? ((await Datas.get(con)({\n          key: assistantId,\n        })) as Daimon)\n      : assistant;\n    console.log(\"assistant DAIMON\", assistantDaimon);\n    const roomChildren = isDefined(roomId)\n      ? await findRoomChildren(con)(roomId)\n      : [];\n    const roomContents = await roomsToRoomContents(con)(roomChildren);\n\n    const priorTimelineSiblinRoomContents = await findPriorTimelineSiblings(\n      con\n    )(roomId);\n\n    const assistantName = assistantDaimon?.chara?.data.name ?? \"assistant\";\n    const userName = userDaimon?.chara.data.name ?? \"user\";\n    const vars = {\n      user: userName,\n      char: assistantName,\n    };\n\n    const daimonSystemPrompt = isDefined(assistantDaimon)\n      ? Daimons.daimonToSystemPrompt(assistantDaimon, vars)\n      : undefined;\n    const userSystemPrompt = isDefined(userDaimon)\n      ? Daimons.daimonToSystemPrompt(userDaimon, vars)\n      : undefined;\n    const roomContentsPrompt = await roomContentsToPrompt(con)([\n      ...priorTimelineSiblinRoomContents,\n      ...roomContents,\n    ]);\n    const roomContextPrompt = isDefined(roomId)\n      ? (await findRoomContext(con)(roomId))?.value\n      : undefined;\n\n    const fullSystemPrompt = [\n      roomContextPrompt,\n      `# ${assistantName} Description`,\n      daimonSystemPrompt,\n      `# ${userName} Description`,\n      userSystemPrompt,\n      \"# Conversation History\",\n      roomContentsPrompt,\n    ]\n      .filter(isDefined)\n      .join(\"\\n\");\n\n    console.log(fullSystemPrompt);\n\n    const model = assistantDaimon?.chara?.data?.extensions?.llm;\n    let finished = false;\n    const createdAt = Date.now();\n    const creatorId = isEntity(assistantDaimon)\n      ? assistantDaimon?.id\n      : undefined;\n    return new Promise<Partial<Content>>(async (resolve, reject) => {\n      try {\n        await con.requestMany({\n          subject: \"textgen.generate\",\n          signal,\n          options: {\n            timeoutMs: 1000 * 60 * 5,\n          },\n\n          onResponse: async (response) => {\n            if (finished) {\n              return;\n            }\n            const text = responseTextMapper(response.text ?? \"\");\n            const content: Partial<Content> = {\n              creatorId,\n              value: text,\n              createdAt,\n              updatedAt: Date.now(),\n              finalized: response.done,\n              contentType: MESSAGE_CONTENT_TYPE,\n            };\n            await onUpdate?.(content);\n            if (response.done) {\n              finished = true;\n              resolve(content);\n              return;\n            }\n          },\n          request: {\n            body: {\n              model,\n              stream: true,\n              max_tokens: maxTokens,\n              messages: [\n                {\n                  role: \"system\",\n                  content: fullSystemPrompt,\n                },\n                {\n                  role: \"user\",\n                  content: query,\n                },\n              ],\n            },\n          },\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n"]}