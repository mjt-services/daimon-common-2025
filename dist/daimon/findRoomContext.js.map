{"version":3,"file":"findRoomContext.js","sourceRoot":"","sources":["../../src/daimon/findRoomContext.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAE,KAAK,EAA0B,MAAM,gCAAgC,CAAC;AAK/E,MAAM,CAAC,MAAM,eAAe,GAC1B,CAA8B,GAAiC,EAAE,EAAE,CACnE,KAAK,EAAE,MAAc,EAAE,EAAE;IACvB,MAAM,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjC,GAAG,EAAE,MAAM;KACZ,CAAC,CAAS,CAAC;IACZ,IAAI,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QAChC,OAAO;IACT,CAAC;IACD,OAAO,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC3B,GAAG,EAAE,IAAI,CAAC,SAAS;KACpB,CAAC,CAAY,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import { isUndefined } from \"@mjt-engine/object\";\nimport { Datas, type DataConnectionMap } from \"@mjt-services/data-common-2025\";\nimport type { Content } from \"../type/Content\";\nimport type { Room } from \"../type/Room\";\nimport type { MessageConnectionInstance } from \"@mjt-engine/message/dist/createConnection\";\n\nexport const findRoomContext =\n  <M extends DataConnectionMap>(con: MessageConnectionInstance<M>) =>\n  async (roomId: string) => {\n    const room = (await Datas.get(con)({\n      key: roomId,\n    })) as Room;\n    if (isUndefined(room.contextId)) {\n      return;\n    }\n    return (await Datas.get(con)({\n      key: room.contextId,\n    })) as Content;\n  };\n"]}